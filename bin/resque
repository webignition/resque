#!/usr/bin/env php
<?php

$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}

$autoloadFiles = [
    __DIR__ . '/../../../../app/autoload.php',
    __DIR__ . '/../../../../vendor/autoload.php',
    __DIR__ . '/../vendor/autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require $autoloadFile;
        break;
    }
}

// Add support for https://sentry.io through env
$sentryClient = null;
if ($SENTRY_DSN = getenv('SENTRY_DSN')) {
    // Sentry sdk 2.0
    if (function_exists('Sentry\init')) {
        \Sentry\init(['dsn' => $SENTRY_DSN]);
    } else {
        // ver 1
        $RavenAutoloader = __DIR__ . '/../../../../vendor/sentry/sentry/lib/Raven/Autoloader.php';
        if (file_exists($RavenAutoloader)) {
            $autoload1 = TRUE;
            require $RavenAutoloader;
            $autoload2 = TRUE;
            \Raven_Autoloader::register();
            $sentryClient = new \Raven_Client($SENTRY_DSN);
            $error_handler = new Raven_ErrorHandler($sentryClient);
            $error_handler->registerExceptionHandler();
            $error_handler->registerErrorHandler();
            $error_handler->registerShutdownFunction();
        }
    }
}

$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE (' . $APP_INCLUDE . ") does not exist.\n");
    }

    require_once $APP_INCLUDE;
}

$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');
if (!empty($REDIS_BACKEND)) {
    if (empty($REDIS_BACKEND_DB)) {
        Resque::setBackend($REDIS_BACKEND);
    } else {
        Resque::setBackend($REDIS_BACKEND, $REDIS_BACKEND_DB);
    }
}

$logLevel = FALSE;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
    $logLevel = TRUE;
} else if (!empty($VVERBOSE)) {
    $logLevel = TRUE;
}

// See if the APP_INCLUDE containes a logger object,
// If none exists, fallback to internal logger
if (!isset($logger) || !is_object($logger)) {
    $logger = new Resque_Log($logLevel);
}

if ($SENTRY_DSN = getenv('SENTRY_DSN')) {
    $logger->log(Psr\Log\LogLevel::INFO, 'SENTRY_DSN Reporting will be sent to {SENTRY_DSN}', ['SENTRY_DSN' => $SENTRY_DSN]);
}

$BLOCKING = getenv('BLOCKING') !== FALSE;

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$count = 1;
$COUNT = getenv('COUNT');
if (!empty($COUNT) && $COUNT > 1) {
    $count = $COUNT;
}

$PREFIX = getenv('PREFIX');
if (!empty($PREFIX)) {
    $logger->log(Psr\Log\LogLevel::INFO, 'Prefix set to {prefix}', ['prefix' => $PREFIX]);
    Resque_Redis::prefix($PREFIX);
}

// If set, re-attach failed jobs based on retry_strategy
Resque_Event::listen('onFailure', function (Exception $exception, Resque_Job $job) use ($logger, $sentryClient) {

    // Allow integration with Sentry.io
    if (null !== $sentryClient){
        $sentryClient->captureException($exception);
    }

    $args = $job->getArguments();

    if (empty($args['resque.retry_strategy'])) {
        return;
    }

    if (!isset($args['resque.retry_attempt'])) {
        $args['resque.retry_attempt'] = 0;
    }

    $backoff = $args['resque.retry_strategy'];
    if (!isset($backoff[$args['resque.retry_attempt']])) {
        return;
    }

    $delay = $backoff[$args['resque.retry_attempt']];
    $args['resque.retry_attempt']++;

    if ($delay == 0) {
        Resque::enqueue($job->queue, $job->payload['class'], $args);
        $logger->log(Psr\Log\LogLevel::ERROR, 'Job failed. Auto re-queued, attempt number: {attempt}', [
                'attempt' => $args['resque.retry_attempt'] - 1]
        );
    } else {
        $at = time() + $delay;
        ResqueScheduler::enqueueAt($at, $job->queue, $job->payload['class'], $args);
        $logger->log(Psr\Log\LogLevel::ERROR, 'Job failed. Auto re-queued. Scheduled for: {timestamp}, attempt number: {attempt}', [
            'timestamp' => date('Y-m-d H:i:s', $at),
            'attempt'   => $args['resque.retry_attempt'] - 1,
        ]);
    }
});

if ($count > 1) {
    for ($i = 0; $i < $count; ++$i) {
        $pid = Resque::fork();
        if ($pid == -1) {
            $logger->log(Psr\Log\LogLevel::EMERGENCY, 'Could not fork worker {count}', ['count' => $i]);
            die();
        } else if (!$pid) {
            // Child, start the worker
            $queues = explode(',', $QUEUE);
            $worker = new Resque_Worker($queues);
            $worker->setLogger($logger);
            $logger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', ['worker' => $worker]);
            $worker->work($interval, $BLOCKING);
            break;
        }
    }
} else {
    // Start a single worker
    $queues = explode(',', $QUEUE);
    $worker = new Resque_Worker($queues);
    $worker->setLogger($logger);

    $PIDFILE = getenv('PIDFILE');
    if ($PIDFILE) {
        file_put_contents($PIDFILE, getmypid()) or
        die('Could not write PID information to ' . $PIDFILE);
    }

    $logger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', ['worker' => $worker]);
    $worker->work($interval, $BLOCKING);
}
